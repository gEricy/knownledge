#### [微服务怎么保证高可用？](https://www.sohu.com/a/331036750_268033)

1. 服务冗余：主从副本

   > 要考虑一致性问题：2PC/3PC/TCC

2. 服务限流降级熔断

   - 限流：限制请求的流量不超过系统能承受的阈值，限流算法：令牌桶、漏桶

   - 降级：将非核心业务关闭。如：双11活动时，把无关交易的服务统统降级，如查看蚂蚁深林，查看历史订单，商品历史评论，只显示最后100条等等。
     - 服务降级一般从【整体负荷】考虑
     - 服务降级有层级之分：将非核心业务停止，保证核心业务不受影响
     - 服务降级可以人工干预（代码中设置开关控制，具有代码侵入性）

   - 熔断：

     > 1.假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。
     >
     > 2.高压电路中，如果某个地方的电压过高，熔断器就会熔断，对电路进行保护。股票交易中，如果股票指数过高，也会采用熔断机制，暂停股票的交易。当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。
     >
     > 3.使用案例
     >
     > 1）在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。
     >
     > 2）在dubbo中也可利用nio超时+失败次数做熔断。

     - 服务熔断一般是【某个下游服务故障】引起的，（该服务失败频繁or时延巨大）
     - 服务熔断一般是每个微服务都需要（无层级之分）
     - 服务熔断一般是基于策略的自动触发，自治性要求很高：触发服务熔断、服务恢复

   降级/熔断：都是使某个服务不可用or返回错误，防止系统整体缓慢/崩溃。

3. 负载均衡

   > 将服务分发到核实的服务器上处理，保证负载均衡。

4. 服务发现与治理：etcd

5. 负载均衡
